<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDOhADAzoQSwM6ERMDOhH3AzoS8t8qR55C3
        tP5gocv/ZqTI/5i7rf6/zYfnwM6EvMDOhH3AzoREwM6EEsDOhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDOhADAzoQMwM6EUMDOhKzAzoTmwM6E/r/O
        h/+VubH/Q5TP/yqKz/8ris//aKTI/7vMi//AzoT/wM6E/sDOhObAzoSswM6EUMDOhAzAzoQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDOhADAzoQBwM6EMcDOhKLAzoTxwM6E/8DO
        hP/Bz4P/sMaZ/1adyv8oidD/KYrP/zGN0P9+r7r/vs2I/8DOhP/AzoT/wM6E/8DOhP/AzoTxwM6EosDO
        hDHAzoQBwM6EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAzoQAwM6EA8DOhFDAzoTQwM6E/8DO
        hP/AzoT/wM6E/8DOhv+MtrL/No/Q/ymKz/8oic//R5bO/6fCoP/Bz4P/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/wM6E0MDOhFDAzoQDwM6EAAAAAAAAAAAAAAAAAAAAAAAAAAAAwM6EAMDOhALAzoRcwM6E4sDO
        hP/AzoT/wM6E/8DOhP/AzoT/vMyN/2mlxv8pis//KorP/yuK0P9npcL/uMuQ/8HOg//AzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E4sDOhFzAzoQCwM6EAAAAAAAAAAAAAAAAAMDOhADAzoQAwM6EUMDO
        hOHAzoT/wM6E/8DOhP/AzoT/wM6E/8HOg/+mwqL/RZXN/ymKz/8pis//L4zQ/4q0tf/BzoX/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E4cDOhFDAzoQAwM6EAAAAAADAzoQAwM6EAMDO
        hDDAzoTQwM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wc6E/5G3sv8xjdD/KYrP/zCNz/85kdD/lrqv/8HO
        g//AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E0MDOhDDAzoQAwM6EAMDO
        hADAzoQLwM6Eo8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOg/+6y47/cqnB/y2L0P8ujM//UprQ/1Ca
        zv+iwKL/wc6D/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6Eo8DO
        hAvAzoQAwM6EAMDOhFDAzoTxwM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wc+D/7DGmv9Omsv/J4nP/zmQ
        z/9no9D/XqDJ/7fJkf/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoTxwM6EUMDOhADAzoQRwM6ErMDOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/Bz4P/pMGh/0OU
        z/8oic//TpnQ/2Si0P9opMX/vMyK/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoSswM6EEcDOhETAzoTlwM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        h/+Hs7T/M47Q/ymJz/9mo87/UJnQ/3Kpwf++zYr/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhOXAzoREwM6EfMDOhP7AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/vs2K/3Gpwv8pis//L4zP/3Gozv9BlND/e667/77Ni/+9zYr/vs2K/7/Oh//Bz4P/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/sDOhHzAzoS7wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP+7y4z/ZKPH/yeJz/9Ak8//eKvL/z2Sz/92rMH/hrO4/22owv9wqcH/iLS1/7DG
        mf++zYb/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6Eu8DOhOjAzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wc6E/67Fmf9Nmcv/J4nP/0uYzP96rMn/NI7P/z2S0P81jtH/L4zR/yyL
        0P8zjtD/XaDK/6C+qf+/zof/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoTowM6E/sDO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/BzoP/nb6p/zmQz/8oic//V57J/3Goyv8ti9D/L4zP/2Ki
        xv+QtrT/cajD/zSOz/8pitD/Wp7L/6zEnf/BzoP/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP7AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8HOg/+Tua//MY3Q/yyL0P9tp8b/aKXG/y2L
        0P9focv/m7yw/5y+qf+LtL3/TJjP/ymJz/8wjdD/hrK4/8DOh//BzoP/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wc6D/4m0tP8vjNH/MIzP/3yt
        w/9gosX/L4zQ/0+Zz/9LmMz/N5DP/ziQz/82kND/K4rP/yqKz/9LmMz/l7qt/7jKkP/BzoP/wM6E/8DO
        hP/AzoT/wM6E/8DOhP/AzoT/wM6E/sDOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP+9zYr/dKq9/yyL
        0f8yjs7/grHF/1Kbyv8oic//L4zQ/0+azP9vqMP/gLC4/3+wuf89ks7/KYrP/y+Mz/9GltD/cqrC/7HH
        mf/BzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP7AzoTowM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wc6D/7XJ
        lP9docb/KYrQ/zSOzf+CsMb/R5bO/yyLz/9tp8X/qsSf/77Niv+/zof/uMqQ/12gyf8oic//PZLQ/3aq
        xf9Pms7/b6jE/7fJkP/AzoT/wM6E/8DOhP/AzoT/wM6E6MDOhLvAzoT/wM6E/8DOhP/AzoT/wM6E/8DO
        hP/Bz4P/scaY/02Zyv8nic//OZHN/462vv9Vncr/MI3Q/4Cwt/+/zYf/wM6E/8DOhP+8zIr/ZqTF/yiJ
        z/83j9D/lLmt/462tP9LmM//mbuq/8HOg//AzoT/wM6E/8DOhP/AzoS7wM6EfMDOhP7AzoT/wM6E/8DO
        hP/AzoT/wM6E/8HPg/+vxpn/TJnL/yeJz/9Flsz/n7+r/2unwP8ritH/cqrA/77Nif/AzoT/wM6E/73M
        iv9tp8H/KInP/zOO0P+Tuan/ssea/1edzP+CsLf/wc6F/8DOhP/AzoT/wM6E/sDOhHzAzoREwM6E5cDO
        hP/AzoT/wM6E/8DOhP/AzoT/wc+D/6/Gmf9Mmcv/J4nQ/0+ay/+0yJj/grC3/y2L0f9npMb/u8yL/8DO
        hP/AzoT/vcyK/2ynwv8oic//PJHQ/529pP+9zI3/bajB/2unwv+5y47/wc6D/8DOhP/AzoTlwM6ERMDO
        hBHAzoSswM6E/8DOhP/AzoT/wM6E/8DOhP/Bz4P/r8aZ/0yZy/8nidD/XZ/I/7vLi/+SuLH/MI3Q/02Z
        zP+rxJz/wc6D/8DOhP+7zIv/ZaPG/yeJ0P9Il87/rMSc/8HOh/94rL3/ZaTF/7bJkf/BzoP/wM6E/8DO
        hKzAzoQRwM6EAMDOhFDAzoTxwM6E/8DOhP/AzoT/wM6E/8HPg/+vxpn/TJnL/yeJ0P9lo8b/vMyK/6C/
        pv89k87/NI7P/5W5r//BzoT/wc6E/67FmP9Qmsv/KInQ/1adyv+zyJf/wM6J/2+pv/9sp8D/vcyM/8DO
        g//AzoTxwM6EUMDOhADAzoQAwM6EC8DOhKPAzoT/wM6E/8DOhP/AzoT/wc+D/7DGmf9Mmcv/JojQ/2il
        xv+8zIr/uMqR/2Chyf8ri9D/canA/7nLj//Bz4P/mrys/zePz/8ti9H/ea28/73Niv/AzoX/mbuu/5G4
        sv/Azof/wM6E/8DOhKPAzoQLwM6EAMDOhADAzoQAwM6EMMDOhNDAzoT/wM6E/8DOhP/BzoP/ucuP/3Wr
        vv86kdD/dKrC/73Miv+/zYj/gLC6/zCN0P9Dlc//oL+o/8DOif+Is7j/L4zQ/zuRz/+au6z/wc6D/8DO
        hP+7zIv/usuN/8DOhP/AzoTQwM6EMMDOhADAzoQAAAAAAMDOhADAzoQAwM6EUMDOhOHAzoT/wM6E/8DO
        hP/AzoT/tsmS/5y9qv+wxpj/wM6E/8HPg/+sxZz/U5zM/yuL0P9eoMj/kri0/02ZzP8tjND/b6fE/7rL
        j//AzoT/wM6E/8HOg//BzoP/wM6E4cDOhFDAzoQAwM6EAAAAAAAAAAAAAAAAAMDOhADAzoQCwM6EXMDO
        hOLAzoT/wM6E/8DOhP/AzoT/wc6D/8DOhP/AzoT/wM6E/73NiP+Pt7L/Q5XP/y+M0P86kND/L4zQ/1me
        y/+mwqH/wM6E/8DOhP/AzoT/wM6E/8DOhOLAzoRcwM6EAsDOhAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDO
        hADAzoQDwM6EUMDOhNDAzoT/wM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wc6D/7zMif+fvqn/aqbD/02Z
        y/9zqcD/qMKh/8DOhf/AzoT/wM6E/8DOhP/AzoTQwM6EUMDOhAPAzoQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMDOhADAzoQBwM6EMcDOhKLAzoTxwM6E/8DOhP/AzoT/wM6E/8DOhP/AzoT/wM6E/8HO
        hP+3ypH/sceZ/7rLjv/AzoT/wM6E/8DOhP/AzoTxwM6EosDOhDHAzoQBwM6EAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAzoQAwM6EDMDOhFDAzoSswM6E5sDOhP7AzoT/wM6E/8DO
        hP/AzoT/wM6E/8HOg//Bz4P/wM6E/8DOhP7AzoTmwM6ErMDOhFDAzoQMwM6EAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwM6EAMDOhBLAzoREwM6EfcDO
        hLzAzoTnwM6E/sDOhP/AzoT/wM6E/sDOhOfAzoS8wM6EfcDOhETAzoQSwM6EAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/4AAAf8AAAD+AAAAfgAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH4AAAB/AAAA/4AAAf/gAAf/+AAf8=
</value>
  </data>
</root>